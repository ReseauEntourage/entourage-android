apply plugin: "com.android.application"
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'io.fabric'
apply plugin: 'com.google.android.gms.oss-licenses-plugin'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    def MIXPANEL_TOKEN_DEBUG = System.env.MIXPANEL_TOKEN_DEBUG ? '"' + System.env.MIXPANEL_TOKEN_DEBUG + '"' : entourageMixpanelTokenDebug
    def MIXPANEL_TOKEN = System.env.MIXPANEL_TOKEN ? '"' + System.env.MIXPANEL_TOKEN + '"' : entourageMixpanelToken
    def MIXPANEL_TOKEN_PFP = System.env.MIXPANEL_TOKEN_PFP ? '"' + System.env.MIXPANEL_TOKEN_PFP + '"' : entourageMixpanelTokenPFP

    def TEST_ACCOUNT_LOGIN = System.env.TEST_ACCOUNT_LOGIN ? '"' + System.env.TEST_ACCOUNT_LOGIN + '"' : entourageTestLogin
    def TEST_ACCOUNT_PWD = System.env.TEST_ACCOUNT_PWD ? '"' + System.env.TEST_ACCOUNT_PWD + '"' : entourageTestPwd
    def TEST_PFP_ACCOUNT_LOGIN = System.env.TEST_ACCOUNT_LOGIN ? '"' + System.env.TEST_PFP_ACCOUNT_LOGIN + '"' : pfpTestLogin
    def TEST_PFP_ACCOUNT_PWD = System.env.TEST_ACCOUNT_PWD ? '"' + System.env.TEST_PFP_ACCOUNT_PWD + '"' : pfpTestPwd

    defaultConfig {
        applicationId 'social.entourage.android'

        resConfigs 'en', 'fr'

        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        versionCode rootProject.ext.versionCodeInt
        versionName rootProject.ext.versionNameProd

        buildConfigField 'String', 'VERSION_DISPLAY_NAME', '"' + rootProject.ext.versionBranchName +'"'
        setProperty("archivesBaseName", "$appBundleName-$versionNameProd")
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary true

        buildConfigField 'String', 'ENTOURAGE_URL', '"https://api.entourage.social/api/v1/"'
        buildConfigField 'String', 'MIXPANEL_TOKEN', MIXPANEL_TOKEN

        buildConfigField 'String', 'TEST_ACCOUNT_LOGIN', TEST_ACCOUNT_LOGIN
        buildConfigField 'String', 'TEST_ACCOUNT_PWD', TEST_ACCOUNT_PWD
    }

    signingConfigs {
        googleplay {
            keyAlias 'googleplay'
            keyPassword "${System.env.KEYSTORE_PASS}"
            storeFile file('../keystore/googleplay-keystore.jks')
            storePassword "${System.env.KEYSTORE_PASS}"
        }

        googleplay_pfp {
            keyAlias 'googleplay-pfp'
            keyPassword "${System.env.KEYSTORE_PASS}"
            storeFile file('../keystore/googleplay-pfp-keystore.jks')
            storePassword "${System.env.KEYSTORE_PASS}"
        }

        debug {
            storeFile file('../keystore/debug.keystore')
        }
    }

    flavorDimensions 'app', 'env'

    productFlavors {
        prod {
            dimension 'env'
        }
        staging {
            dimension 'env'
            applicationIdSuffix '.preprod'
            buildConfigField 'String', 'MIXPANEL_TOKEN', MIXPANEL_TOKEN_DEBUG

        }
        entourage {
            dimension 'app'
            buildConfigField 'String', 'API_KEY', '"eba339ae2dac29941af8cbd6"'
            ext {
                prod = [
                        serverURL: "https://api.entourage.social/api/v1/",
                        deepLinksHostName: "www.entourage.social",
                        deepLinksScheme: "entourage"
                ]
                staging = [
                        serverURL: "https://entourage-back-preprod.herokuapp.com/api/v1/",
                        deepLinksHostName: "entourage-landingpages-preprod.herokuapp.com",
                        deepLinksScheme: "entourage-staging"
                ]
            }
        }
        pfp {
            dimension 'app'
            applicationId 'social.entourage.android.pfp'
            buildConfigField 'String', 'MIXPANEL_TOKEN', MIXPANEL_TOKEN_PFP
            buildConfigField 'String', 'API_KEY', '"ee15c4f26482e61b72f1f565"'

            buildConfigField 'String', 'TEST_ACCOUNT_LOGIN', TEST_PFP_ACCOUNT_LOGIN
            buildConfigField 'String', 'TEST_ACCOUNT_PWD', TEST_PFP_ACCOUNT_PWD

            ext {
                prod = [
                        serverURL: "https://apipxtgs.entourage.social/api/v1/",
                        deepLinksHostName: "www.entourage.social/pfp",
                        deepLinksScheme: "pfp-prod"
                ]
                staging = [
                        serverURL: "https://pfp-back-preprod.herokuapp.com/api/v1/",
                        deepLinksHostName: "entourage-landingpages-preprod.herokuapp.com",
                        deepLinksScheme: "pfp-staging"
                ]
            }
        }
    }

    buildTypes {
        release {
            productFlavors.entourage.signingConfig signingConfigs.googleplay
            productFlavors.pfp.signingConfig signingConfigs.googleplay_pfp
            debuggable false
        }

        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix '.debug'
            ext.alwaysUpdateBuildId = false
            ext.enableCrashlytics = false
            //optimizing build speed
            splits.abi.enable = false
            splits.density.enable = false
            aaptOptions.cruncherEnabled = false
        }
    }

    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibilityVersion
        targetCompatibility rootProject.ext.targetCompatibilityVersion
    }

    android.applicationVariants.all { variant ->
        def flavors = variant.productFlavors
        // flavorDimensions "app" -> 0, "env" -> 1
        def app = flavors[0]
        def environment = flavors[1]

        variant.buildConfigField "String", "ENTOURAGE_URL", "\"${app[environment.name]['serverURL']}\""
        variant.buildConfigField "String", "DEEP_LINKS_SCHEME", "\"${app[environment.name]['deepLinksScheme']}\""

        variant.mergedFlavor.manifestPlaceholders = [
                deepLinksHostName       : "${app[environment.name]['deepLinksHostName']}",
                deepLinksEntourageScheme : "${app[environment.name]['deepLinksScheme']}"
        ]

    }

    packagingOptions {
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/DEPENDENCIES'
    }

    lintOptions {
        disable 'InvalidPackage'
        abortOnError false
    }

    dexOptions {
        jumboMode = true
    }
}

dependencies {
    implementation androidSupportDependencies.values()
    implementation devDependencies.values()
    implementation firebaseDependencies.values()
    implementation gmsDependencies.values()
    implementation networkDependencies.values()
    implementation uiDependencies.values()

    entourageImplementation facebookDependencies.values()

    compileOnly javaDependencies.values()

    annotationProcessor annotationDependencies.values()

    androidTestImplementation testDependencies.values()
}

apply plugin: "com.google.gms.google-services"
